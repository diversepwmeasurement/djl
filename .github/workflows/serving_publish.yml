jobs:
  publish:
    if: github.repository == 'deepjavalibrary/djl'
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.serving-branch }}
        repository: deepjavalibrary/djl-serving
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 17
    - continue-on-error: true
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        path: ~/.gradle/caches
        restore-keys: '${{ runner.os }}-gradle-

          '
    - continue-on-error: true
      name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: us-east-2
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - continue-on-error: true
      if: ${{ github.event.inputs.mode == '' || github.event.inputs.mode == 'snapshot'
        }}
      name: Copy serving snapshot artifacts to S3
      run: './gradlew :serving:createDeb -Psnapshot

        DJL_VERSION=$(cat gradle.properties | awk -F ''='' ''/djl_version/ {print
        $2}'')

        aws s3 cp serving/build/distributions/*.deb s3://djl-ai/publish/djl-serving/

        aws cloudfront create-invalidation --distribution-id E371VB8JQ6NRVY --paths
        "/djl-serving/djl-serving_${DJL_VERSION}*"

        '
    - continue-on-error: true
      if: ${{ github.event.inputs.mode == 'staging' }}
      name: Copy serving release artifacts to S3
      run: "./gradlew :serving:dZ :serving:createDeb -Pstaging\nDJL_VERSION=$(cat\
        \ gradle.properties | awk -F '=' '/djl_version/ {print $2}')\naws s3 cp serving/build/distributions/*.deb\
        \ s3://djl-ai/publish/djl-serving/\naws cloudfront create-invalidation --distribution-id\
        \ E371VB8JQ6NRVY --paths \"/djl-serving/djl-serving_${DJL_VERSION}*\"\nif\
        \ [[ $(aws s3 ls s3://djl-ai/publish/djl-serving/serving-$DJL_VERSION.tar\
        \ | wc -l) -eq 0 ]]; \\\n  then aws s3 cp serving/build/distributions/*.tar\
        \ s3://djl-ai/publish/djl-serving/; \\\n  else echo serving tarball published\
        \ already!; fi\naws s3 cp serving/build/distributions/*.zip s3://djl-ai/publish/djl-serving/\n\
        aws cloudfront create-invalidation --distribution-id E371VB8JQ6NRVY --paths\
        \ \"/djl-serving/serving-${DJL_VERSION}*\"\n"
    - continue-on-error: true
      if: ${{ github.event.inputs.mode == 'staging' }}
      name: Copy benchmark release artifacts to S3
      run: './gradlew :benchmark:dZ :benchmark:createDeb -Pstaging

        DJL_VERSION=$(cat gradle.properties | awk -F ''='' ''/djl_version/ {print
        $2}'')

        aws s3 cp benchmark/build/distributions/*.tar s3://djl-ai/publish/djl-bench/${DJL_VERSION}/

        aws s3 cp benchmark/build/distributions/*.deb s3://djl-ai/publish/djl-bench/${DJL_VERSION}/

        aws s3 cp benchmark/build/distributions/*.zip s3://djl-ai/publish/djl-bench/${DJL_VERSION}/

        aws cloudfront create-invalidation --distribution-id E371VB8JQ6NRVY --paths
        "/djl-bench/${DJL_VERSION}/*"

        '
    - continue-on-error: true
      if: ${{ github.event.inputs.mode == '' || github.event.inputs.mode == 'snapshot'
        }}
      name: Copy awscurl snapshot artifacts to S3
      run: './gradlew :awscurl:jar

        aws s3 cp awscurl/build/awscurl s3://djl-ai/publish/awscurl/

        aws cloudfront create-invalidation --distribution-id E371VB8JQ6NRVY --paths
        "/awscurl/awscurl"

        '
    - continue-on-error: true
      if: ${{ github.event.inputs.mode == 'staging' }}
      name: Copy awscurl staging artifacts to S3
      run: './gradlew :awscurl:jar

        DJL_VERSION=$(cat gradle.properties | awk -F ''='' ''/djl_version/ {print
        $2}'')

        aws s3 cp awscurl/build/awscurl s3://djl-ai/publish/awscurl/${DJL_VERSION}/

        aws cloudfront create-invalidation --distribution-id E371VB8JQ6NRVY --paths
        "/awscurl/${DJL_VERSION}/*"

        '
    - continue-on-error: true
      env:
        DJL_STAGING: ${{ github.event.inputs.repo-id }}
        ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.ORG_GRADLE_PROJECT_ossrhPassword
          }}
        ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.ORG_GRADLE_PROJECT_ossrhUsername
          }}
        ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword
          }}
      if: ${{ github.event.inputs.mode == '' || github.event.inputs.mode == 'snapshot'
        }}
      name: Publish to snapshot repository
      run: ./gradlew publish -Psnapshot --refresh-dependencies
    - continue-on-error: true
      env:
        DJL_STAGING: ${{ github.event.inputs.repo-id }}
        ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.ORG_GRADLE_PROJECT_ossrhPassword
          }}
        ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.ORG_GRADLE_PROJECT_ossrhUsername
          }}
        ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword
          }}
      if: ${{ github.event.inputs.mode == 'staging' }}
      name: Publish to staging repository
      run: ./gradlew publish -Pstaging --refresh-dependencies
name: Serving publish
on:
  repository_dispatch:
    types: trigger-ga___serving_publish.yml
