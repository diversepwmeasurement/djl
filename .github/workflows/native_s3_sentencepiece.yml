jobs:
  build-sentencepiece-jni-aarch64:
    container: centos:centos7
    if: ${{ github.repository == 'deepjavalibrary/djl' && always() }}
    needs: create-aarch64-runner
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Install Environment
      run: 'yum -y update

        yum -y install centos-release-scl-rh epel-release

        yum -y install devtoolset-7 git patch cmake3 libstdc++-static

        ln -s /usr/bin/cmake3 /usr/bin/cmake

        pip3 install awscli --upgrade

        '
    - continue-on-error: true
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        architecture: aarch64
        distribution: corretto
        java-version: 17
    - continue-on-error: true
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        path: ~/.gradle/caches
        restore-keys: '${{ runner.os }}-gradle-

          '
    - continue-on-error: true
      name: Release JNI prep
      run: 'export PATH=$PATH:/opt/rh/devtoolset-7/root/usr/bin

        ./gradlew :extensions:sentencepiece:compileJNI

        ./gradlew -Pjni :extensions:sentencepiece:test

        '
    - continue-on-error: true
      name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: us-east-2
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - continue-on-error: true
      name: Copy files to S3 with the AWS CLI
      run: 'SENTENCEPIECE_VERSION="$(cat gradle.properties | awk -F ''='' ''/sentencepiece_version/
        {print $2}'')"

        aws s3 sync extensions/sentencepiece/jnilib s3://djl-ai/publish/sentencepiece-${SENTENCEPIECE_VERSION}/jnilib/

        aws cloudfront create-invalidation --distribution-id E371VB8JQ6NRVY --paths
        "/sentencepiece-${SENTENCEPIECE_VERSION}/jnilib/*"

        '
    timeout-minutes: 30
  build-sentencepiece-jni-arm64-osx:
    if: ${{ github.repository == 'deepjavalibrary/djl' && always() }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        architecture: aarch64
        distribution: corretto
        java-version: 17
    - continue-on-error: true
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - continue-on-error: true
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        path: ~/.gradle/caches
        restore-keys: '${{ runner.os }}-gradle-

          '
    - continue-on-error: true
      name: Release JNI prep
      run: './gradlew :extensions:sentencepiece:compileJNI

        ./gradlew -Pjni :extensions:sentencepiece:test

        '
    - continue-on-error: true
      name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: us-east-2
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - continue-on-error: true
      name: Copy files to S3 with the AWS CLI
      run: 'SENTENCEPIECE_VERSION="$(cat gradle.properties | awk -F ''='' ''/sentencepiece_version/
        {print $2}'')"

        aws s3 sync extensions/sentencepiece/jnilib s3://djl-ai/publish/sentencepiece-${SENTENCEPIECE_VERSION}/jnilib/

        aws cloudfront create-invalidation --distribution-id E371VB8JQ6NRVY --paths
        "/sentencepiece-${SENTENCEPIECE_VERSION}/jnilib/*"

        '
  build-sentencepiece-jni-linux:
    container: centos:centos7
    if: ${{ github.repository == 'deepjavalibrary/djl' && always() }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Install Environment
      run: 'yum -y update

        yum -y install centos-release-scl-rh epel-release

        yum -y install devtoolset-7 git patch cmake3 libstdc++-static

        ln -sf /usr/bin/cmake3 /usr/bin/cmake

        pip3 install awscli --upgrade

        '
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: corretto
        java-version: 17
    - continue-on-error: true
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        path: ~/.gradle/caches
        restore-keys: '${{ runner.os }}-gradle-

          '
    - continue-on-error: true
      name: Release JNI prep
      run: 'export PATH=$PATH:/opt/rh/devtoolset-7/root/usr/bin

        ./gradlew :extensions:sentencepiece:compileJNI

        ./gradlew -Pjni :extensions:sentencepiece:test

        '
    - continue-on-error: true
      name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: us-east-2
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - continue-on-error: true
      name: Copy files to S3 with the AWS CLI
      run: 'SENTENCEPIECE_VERSION="$(cat gradle.properties | awk -F ''='' ''/sentencepiece_version/
        {print $2}'')"

        aws s3 sync extensions/sentencepiece/jnilib s3://djl-ai/publish/sentencepiece-${SENTENCEPIECE_VERSION}/jnilib/

        aws cloudfront create-invalidation --distribution-id E371VB8JQ6NRVY --paths
        "/sentencepiece-${SENTENCEPIECE_VERSION}/jnilib/*"

        '
  build-sentencepiece-jni-osx:
    if: ${{ github.repository == 'deepjavalibrary/djl' && always() }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 17
    - continue-on-error: true
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        path: ~/.gradle/caches
        restore-keys: '${{ runner.os }}-gradle-

          '
    - continue-on-error: true
      name: Release JNI prep
      run: './gradlew :extensions:sentencepiece:compileJNI

        ./gradlew -Pjni :extensions:sentencepiece:test

        '
    - continue-on-error: true
      name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: us-east-2
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - continue-on-error: true
      name: Copy files to S3 with the AWS CLI
      run: 'SENTENCEPIECE_VERSION="$(cat gradle.properties | awk -F ''='' ''/sentencepiece_version/
        {print $2}'')"

        aws s3 sync extensions/sentencepiece/jnilib s3://djl-ai/publish/sentencepiece-${SENTENCEPIECE_VERSION}/jnilib/

        aws cloudfront create-invalidation --distribution-id E371VB8JQ6NRVY --paths
        "/sentencepiece-${SENTENCEPIECE_VERSION}/jnilib/*"

        '
  build-sentencepiece-jni-windows:
    if: ${{ github.repository == 'deepjavalibrary/djl' && always() }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 17
    - continue-on-error: true
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        path: ~/.gradle/caches
        restore-keys: '${{ runner.os }}-gradle-

          '
    - continue-on-error: true
      name: Release JNI prep
      run: './gradlew :extensions:sentencepiece:compileJNI

        ./gradlew -Pjni :extensions:sentencepiece:test

        '
    - continue-on-error: true
      name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: us-east-2
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - continue-on-error: true
      name: Copy files to S3 with the AWS CLI
      run: 'SENTENCEPIECE_VERSION="$(cat gradle.properties | awk -F ''='' ''/sentencepiece_version/
        {print $2}'')"

        aws s3 sync extensions/sentencepiece/jnilib s3://djl-ai/publish/sentencepiece-${SENTENCEPIECE_VERSION}/jnilib/

        aws cloudfront create-invalidation --distribution-id E371VB8JQ6NRVY --paths
        "/sentencepiece-${SENTENCEPIECE_VERSION}/jnilib/*"

        '
      shell: bash
  create-aarch64-runner:
    if: github.repository == 'deepjavalibrary/djl'
    outputs:
      aarch64_instance_id: ${{ steps.create_aarch64.outputs.action_graviton_instance_id
        }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: create_aarch64
      name: Create new Graviton instance
      run: 'cd /home/ubuntu/djl_benchmark_script/scripts

        token=$( curl -X POST -H "Authorization: token ${{ secrets.ACTION_RUNNER_PERSONAL_TOKEN
        }}" \

        https://api.github.com/repos/deepjavalibrary/djl/actions/runners/registration-token
        \

        --fail \

        | jq ''.token'' | tr -d ''"'' )

        ./start_instance.sh action_graviton $token djl

        '
  stop-runners:
    if: ${{ github.repository == 'deepjavalibrary/djl' && always() }}
    needs:
    - create-aarch64-runner
    - build-sentencepiece-jni-aarch64
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Stop all instances
      run: 'cd /home/ubuntu/djl_benchmark_script/scripts

        instance_id=${{ needs.create-aarch64-runner.outputs.aarch64_instance_id }}

        ./stop_instance.sh $instance_id

        '
name: Native S3 Sentencepiece
on:
  repository_dispatch:
    types: trigger-ga___native_s3_sentencepiece.yml
